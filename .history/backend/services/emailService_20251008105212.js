const nodemailer = require('nodemailer');
const logger = require('./logger');
const emailConfig = require('../email-config');

// Email configuration
const transporterConfig = {
  host: process.env.EMAIL_HOST || emailConfig.EMAIL_HOST,
  port: process.env.EMAIL_PORT || emailConfig.EMAIL_PORT,
  secure: false, // true for 465, false for other ports
  auth: {
    user: process.env.EMAIL_USER || emailConfig.EMAIL_USER,
    pass: process.env.EMAIL_PASS || emailConfig.EMAIL_PASS
  }
};

// Create transporter
const transporter = nodemailer.createTransport(transporterConfig);

// Verify connection configuration
transporter.verify((error, success) => {
  if (error) {
    logger.error('Email service error:', error);
  } else {
    logger.info('Email service is ready to send messages');
  }
});

// Send password reset email
const sendPasswordResetEmail = async (email, resetToken) => {
  try {
    const resetUrl = `${process.env.FRONTEND_URL || emailConfig.FRONTEND_URL}/reset-password?token=${resetToken}`;
    
    const mailOptions = {
      from: `"TupPhim" <${transporterConfig.auth.user}>`,
      to: email,
      subject: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u - TupPhim',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9;">
          <div style="background-color: #1f2937; padding: 30px; border-radius: 10px; text-align: center;">
            <h1 style="color: #fbbf24; margin: 0; font-size: 28px;">TupPhim</h1>
            <h2 style="color: white; margin: 20px 0; font-size: 24px;">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h2>
          </div>
          
          <div style="background-color: white; padding: 30px; border-radius: 10px; margin-top: 20px;">
            <p style="color: #374151; font-size: 16px; line-height: 1.6; margin: 0 0 20px 0;">
              Xin ch√†o,
            </p>
            
            <p style="color: #374151; font-size: 16px; line-height: 1.6; margin: 0 0 20px 0;">
              B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n TupPhim c·ªßa m√¨nh. 
              Nh·∫•p v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:
            </p>
            
            <div style="text-align: center; margin: 30px 0;">
              <a href="${resetUrl}" 
                 style="background-color: #fbbf24; color: white; padding: 15px 30px; text-decoration: none; border-radius: 8px; font-weight: bold; font-size: 16px; display: inline-block;">
                ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
              </a>
            </div>
            
            <p style="color: #6b7280; font-size: 14px; line-height: 1.6; margin: 20px 0 0 0;">
              Ho·∫∑c sao ch√©p v√† d√°n li√™n k·∫øt n√†y v√†o tr√¨nh duy·ªát c·ªßa b·∫°n:
            </p>
            <p style="color: #3b82f6; font-size: 14px; word-break: break-all; margin: 5px 0 0 0;">
              ${resetUrl}
            </p>
            
            <div style="background-color: #fef3c7; border: 1px solid #f59e0b; border-radius: 8px; padding: 15px; margin: 20px 0;">
              <p style="color: #92400e; font-size: 14px; margin: 0; font-weight: bold;">
                ‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:
              </p>
              <ul style="color: #92400e; font-size: 14px; margin: 10px 0 0 0; padding-left: 20px;">
                <li>Li√™n k·∫øt n√†y s·∫Ω h·∫øt h·∫°n sau 1 gi·ªù</li>
                <li>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, h√£y b·ªè qua email n√†y</li>
                <li>ƒê·ªÉ b·∫£o m·∫≠t, kh√¥ng chia s·∫ª li√™n k·∫øt n√†y v·ªõi b·∫•t k·ª≥ ai</li>
              </ul>
            </div>
          </div>
          
          <div style="text-align: center; margin-top: 20px; color: #6b7280; font-size: 12px;">
            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng TupPhim</p>
            <p>N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i</p>
          </div>
        </div>
      `
    };

    const info = await transporter.sendMail(mailOptions);
    logger.info(`Password reset email sent to ${email}:`, info.messageId);
    return { success: true, messageId: info.messageId };
  } catch (error) {
    logger.error('Error sending password reset email:', error);
    return { success: false, error: error.message };
  }
};

// Send welcome email
const sendWelcomeEmail = async (email, fullName) => {
  try {
    const mailOptions = {
      from: `"TupPhim" <${transporterConfig.auth.user}>`,
      to: email,
      subject: 'Ch√†o m·ª´ng ƒë·∫øn v·ªõi TupPhim!',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9;">
          <div style="background-color: #1f2937; padding: 30px; border-radius: 10px; text-align: center;">
            <h1 style="color: #fbbf24; margin: 0; font-size: 28px;">TupPhim</h1>
            <h2 style="color: white; margin: 20px 0; font-size: 24px;">Ch√†o m·ª´ng b·∫°n!</h2>
          </div>
          
          <div style="background-color: white; padding: 30px; border-radius: 10px; margin-top: 20px;">
            <p style="color: #374151; font-size: 16px; line-height: 1.6; margin: 0 0 20px 0;">
              Xin ch√†o <strong>${fullName}</strong>,
            </p>
            
            <p style="color: #374151; font-size: 16px; line-height: 1.6; margin: 0 0 20px 0;">
              C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i TupPhim! Ch√∫ng t√¥i r·∫•t vui ƒë∆∞·ª£c ch√†o ƒë√≥n b·∫°n 
              ƒë·∫øn v·ªõi c·ªông ƒë·ªìng y√™u phim c·ªßa ch√∫ng t√¥i.
            </p>
            
            <div style="background-color: #f0f9ff; border: 1px solid #0ea5e9; border-radius: 8px; padding: 20px; margin: 20px 0;">
              <h3 style="color: #0369a1; margin: 0 0 15px 0; font-size: 18px;">üé¨ Nh·ªØng g√¨ b·∫°n c√≥ th·ªÉ l√†m:</h3>
              <ul style="color: #0369a1; font-size: 14px; margin: 0; padding-left: 20px;">
                <li>Xem phim mi·ªÖn ph√≠ v·ªõi ch·∫•t l∆∞·ª£ng cao</li>
                <li>L∆∞u danh s√°ch y√™u th√≠ch</li>
                <li>Theo d√µi l·ªãch s·ª≠ xem phim</li>
                <li>Th√™m phim v√†o danh s√°ch "Xem sau"</li>
                <li>T√¨m ki·∫øm phim theo th·ªÉ lo·∫°i, qu·ªëc gia, nƒÉm</li>
              </ul>
            </div>
            
            <div style="text-align: center; margin: 30px 0;">
              <a href="${process.env.FRONTEND_URL || 'http://localhost:5173'}" 
                 style="background-color: #fbbf24; color: white; padding: 15px 30px; text-decoration: none; border-radius: 8px; font-weight: bold; font-size: 16px; display: inline-block;">
                B·∫Øt ƒë·∫ßu xem phim ngay
              </a>
            </div>
          </div>
          
          <div style="text-align: center; margin-top: 20px; color: #6b7280; font-size: 12px;">
            <p>Ch√∫c b·∫°n c√≥ nh·ªØng tr·∫£i nghi·ªám tuy·ªát v·ªùi v·ªõi TupPhim!</p>
          </div>
        </div>
      `
    };

    const info = await transporter.sendMail(mailOptions);
    logger.info(`Welcome email sent to ${email}:`, info.messageId);
    return { success: true, messageId: info.messageId };
  } catch (error) {
    logger.error('Error sending welcome email:', error);
    return { success: false, error: error.message };
  }
};

module.exports = {
  sendPasswordResetEmail,
  sendWelcomeEmail
};
